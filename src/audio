//MH****************** Copyright (c) by GC *****************************
// Filename 		: init1.c
// Owner			: Gigaset Communications Polska Sp. z o.o.
//-------------------------------------------------------------------------
// Function			: Initialization of BeagleBone Black's ports -gpio(62,63), pwm(42,22)
// Special cases	: Only for Debian Embedded version BeagleBone Black Board
//-------------------------------------------------------------------------
//*************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <termios.h>
#include <poll.h>
#include <stropts.h>
#include <sys/types.h>

//***** Module Specific Defines and Enums *********************************
//***** Module Specific Macros and Typedefs *******************************
//***** Definition of Global Variables ************************************

#define L_PWM 		"pwm_test_P9_42.12"
#define R_PWM 		"pwm_test_P9_22.13"
#define L_GPIO 		"/sys/class/gpio/gpio49"

#define L_GPIO_1	"27"
#define L_GPIO_2	"46"
#define R_GPIO_1	"44"
#define R_GPIO_2	"45"

#define L_SPEED		"7500"
#define R_SPEED		"7500"

//***** Definition of Static Variables ************************************
//***** Prototypes of Static Functions ************************************

static int gpio_getvalue(char pin[]);
static int pwm_getvalue(char pin[]);
static int pwm_speed(char pin[]);
static int turn_status();
static int status();
static int getVoltage();

int main(void) {
	struct termios tty;
	memset (&tty, 0, sizeof tty);
	char comm[50];

	usleep(500000);

/*	FILE *GPIOHandle = NULL;
	char GPIOPath[50] = "/sys/class/gpio";
	sprintf(GPIOPath, "%s/gpio27/value",GPIOPath);
	char val[100];
	GPIOHandle = fopen(GPIOPath, "r");
	fscanf(GPIOHandle, "%s", val);
	fclose(GPIOHandle);*/

	//printf("Odczytana wartosc to: %s \n",val);
	int last = 0;

	strcpy(comm, "echo \"start\" | festival --tts");
	system(comm);

	FILE *GPIOHandle = NULL;
	char *GPIOPath = "/root/BTled/status";
	GPIOHandle = fopen(GPIOPath, "w");
	fprintf(GPIOHandle, "%s", "0");
	fclose(GPIOHandle);

	while(1)
	{
		if(!pwm_getvalue(L_PWM) && !pwm_getvalue(R_PWM) && last != 1)
		{
			//strcpy(comm, "aplay wav/stop");
			//system(comm);
			last = 1;
		}
		else if(pwm_getvalue(L_PWM) && pwm_getvalue(R_PWM) &&gpio_getvalue(L_GPIO_2) && gpio_getvalue(R_GPIO_2) && last != 2 && last != 4 && last != 5)
		{
			strcpy(comm, "aplay ~/BTled/wav/back");
			system(comm);
			last = 2;
		}
		else if(pwm_getvalue(L_PWM) && pwm_getvalue(R_PWM) && gpio_getvalue(L_GPIO_1) && gpio_getvalue(R_GPIO_1) && last != 3 && last != 4 && last != 5)
		{
			strcpy(comm, "aplay ~/BTled/wav/for");
			system(comm);
			last = 3;
		}
		else if(pwm_speed(L_PWM) < 7500 && pwm_speed(R_PWM) > 7500 && last != 4)
		{
			strcpy(comm, "aplay ~/BTled/wav/turning_r");
			system(comm);
			last = 4;
		}
		else if(pwm_speed(L_PWM) > 7500 && pwm_speed(R_PWM) < 7500 && last != 5)
		{
			strcpy(comm, "aplay ~/BTled/wav/turning_l");
			system(comm);
			last = 5;
		}
		else if(pwm_speed(L_PWM) < 7500 && pwm_speed(R_PWM) < 7500 && last != 6)
		{
			strcpy(comm, "aplay ~/BTled/wav/speed");
			system(comm);
			last = 6;
		}
		usleep(10000);

		if(status() == 1)
		{
			//printf("tt");
			strcpy(comm, "echo \"finish\" | festival --tts");
			system(comm);
			break;
		}


	}

}

static int getVoltage()
{
	static char value[10];

	FILE *GPIOHandle = NULL;
	char GPIOPath[50] = "/sys/devices/ocp.3/helper.17";
	sprintf(GPIOPath, "%s/AIN6",GPIOPath);
	GPIOHandle = fopen(GPIOPath, "r");
	fscanf(GPIOHandle, "%s", value);
	fclose(GPIOHandle);

	return atoi(value);
}

static int status()
{
	static char value[10];
	//printf("test");
	FILE *GPIOHandle = NULL;
	char GPIOPath[50] = "/root/BTled/status";
	GPIOHandle = fopen(GPIOPath, "r");
	fscanf(GPIOHandle, "%s", value);
	fclose(GPIOHandle);

	if(strncmp(value,"1",1)==0)
		return 1;
	else if(strncmp(value,"0",1)==0)
		return 0;
	else return -1; //error


}

static int turn_status()
{
	static char valueL[10];
	static char valueR[10];

	FILE *GPIOHandleL = NULL;
	FILE *GPIOHandleR = NULL;

	char GPIOPathL[80] = "/sys/devices/ocp.3";
	sprintf(GPIOPathL, "%s/%s/duty",GPIOPathL, L_PWM);

	GPIOHandleL = fopen(GPIOPathL, "r");
	fscanf(GPIOHandleL, "%s", valueL);
	fclose(GPIOHandleL);



	char GPIOPathR[80] = "/sys/devices/ocp.3";
	sprintf(GPIOPathR, "%s/%s/duty",GPIOPathR, R_PWM);

	GPIOHandleR = fopen(GPIOPathR, "r");
	fscanf(GPIOHandleR, "%s", valueR);
	fclose(GPIOHandleR);

	int valL = atoi(valueL);
	int valR = atoi(valueR);

	//printf("L=%d, R=%d", valL, valR);

	if(valL > valR) return 1; // left
	if(valL < valR) return 2; // right
	if(valL == valR) return 0; // not turning
}

static int gpio_getvalue(char pin[])
{
	static char value[10];

	FILE *GPIOHandle = NULL;
	char GPIOPath[50] = "/sys/class/gpio";
	sprintf(GPIOPath, "%s/gpio%s/value",GPIOPath, pin);
	GPIOHandle = fopen(GPIOPath, "r");
	fscanf(GPIOHandle, "%s", value);
	fclose(GPIOHandle);

	if(strncmp(value,"1",1)==0)
		return 1;
	else if(strncmp(value,"0",1)==0)
		return 0;
	else return -1; //error
}

static int pwm_getvalue(char pin[])
{
	static char value[10];

	FILE *GPIOHandle = NULL;

	char GPIOPath[80] = "/sys/devices/ocp.3";
	sprintf(GPIOPath, "%s/%s/run",GPIOPath, pin);


	GPIOHandle = fopen(GPIOPath, "r");
	fscanf(GPIOHandle, "%s", value);
	fclose(GPIOHandle);

	if(strncmp(value,"1",1)==0)
		return 1;
	else if(strncmp(value,"0",1)==0)
		return 0;
	else return -1; //error
}

static int pwm_speed(char pin[])
{
	static char value[10];

	FILE *GPIOHandle = NULL;

	char GPIOPath[80] = "/sys/devices/ocp.3";
	sprintf(GPIOPath, "%s/%s/duty",GPIOPath, pin);


	GPIOHandle = fopen(GPIOPath, "r");
	fscanf(GPIOHandle, "%s", value);
	fclose(GPIOHandle);
	return atoi(value);
	/*
	if(strncmp(value,"7500",4)==0)
		return 0;
	else return 1; //error
*/
}
